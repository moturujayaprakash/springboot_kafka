package com.example.producer;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.stereotype.Component;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;

import com.example.domain.MessageEvent;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Component
public class MessageEventProducer {
 
	@Autowired
	private KafkaTemplate<Integer,String> kafkaTemplate;
	
	@Autowired
	private ObjectMapper objectMapper;
	
	public void sendMessage(MessageEvent messageEvent) throws JsonProcessingException {
		Integer key=messageEvent.getMessageEventId();
		String value=objectMapper.writeValueAsString(messageEvent);
		ListenableFuture<SendResult<Integer, String>> listenableFuture= kafkaTemplate.sendDefault(key, value);
		
		listenableFuture.addCallback(new ListenableFutureCallback<SendResult<Integer, String>>(){

			@Override
			public void onFailure(Throwable ex) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onSuccess(SendResult<Integer, String> result) {
				handlSuccess(key,value,result);
				
			}	
			
		});
		
	}
	public void handleSuccess(Integer key,String value,SendResult<Integer,String> result) {
		
	}
}
